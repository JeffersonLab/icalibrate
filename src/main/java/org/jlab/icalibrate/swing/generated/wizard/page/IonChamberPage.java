package org.jlab.icalibrate.swing.generated.wizard.page;

import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedHashSet;
import java.util.List;
import javax.swing.table.TableColumnModel;
import org.jlab.icalibrate.exception.ValidationException;
import org.jlab.icalibrate.model.CreateNewDatasetParameters;
import org.jlab.icalibrate.model.IonChamber;
import org.jlab.icalibrate.swing.table.model.IonChamberTableModel;
import org.jlab.icalibrate.swing.table.model.IonChamberTableModel.IonChamberRow;
import org.jlab.icalibrate.swing.table.renderer.UnselectableCellRenderer;
import org.jlab.icalibrate.swing.worker.IonChamberLookupWorker;
import org.jlab.icalibrate.swing.generated.wizard.Wizard;
import org.jlab.icalibrate.swing.generated.wizard.WizardPage;

/**
 * Prompts the operator to confirm the ion chambers.
 *
 * @author ryans
 */
public class IonChamberPage extends WizardPage<CreateNewDatasetParameters> {

    private final IonChamberTableModel tableModel = new IonChamberTableModel();

    /**
     * Create a new IonChamberPage.
     *
     * @param wizard The wizard
     */
    public IonChamberPage(Wizard<CreateNewDatasetParameters> wizard) {
        super(wizard, "Ion Chambers");
        initComponents();
        initTable();
    }

    private void initTable() {
        icTable.getTableHeader()
                .setReorderingAllowed(false);
        icTable.getTableHeader()
                .setResizingAllowed(false);
        icTable.setRowSelectionAllowed(
                false);

        TableColumnModel icTableColumnModel = icTable.getColumnModel();

        UnselectableCellRenderer unselectableRenderer = new UnselectableCellRenderer();

        // Right align results table number columns
        icTableColumnModel.getColumn(0).setCellRenderer(unselectableRenderer); // Name        
        icTableColumnModel.getColumn(1).setCellRenderer(unselectableRenderer); // EPICS Name

        icTableColumnModel.getColumn(0).setPreferredWidth(125); // Name
        icTableColumnModel.getColumn(1).setPreferredWidth(125); // EPICS Name
        icTableColumnModel.getColumn(2).setPreferredWidth(75); // Include

        icTableColumnModel.getColumn(0).setMinWidth(125); // Name
        icTableColumnModel.getColumn(1).setMinWidth(125); // EPICS Name
        icTableColumnModel.getColumn(2).setMinWidth(75); // Include

        //icTableColumnModel.getColumn(0).setMaxWidth(125); // Name
        icTableColumnModel.getColumn(1).setMaxWidth(125); // EPICS Name
        icTableColumnModel.getColumn(2).setMaxWidth(75); // Include
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        icTable = new javax.swing.JTable();

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        icTable.setModel(tableModel);
        jScrollPane4.setViewportView(icTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 372, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable icTable;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane4;
    // End of variables declaration//GEN-END:variables

    @Override
    public void enter() {
        Wizard<CreateNewDatasetParameters> wizard = getWizard();

        IonChamberLookupWorker icWorker = new IonChamberLookupWorker(wizard, this);

        wizard.queueShowModalWait();

        icWorker.execute();
    }

    @Override
    public void leave() throws ValidationException {
        CreateNewDatasetParameters params = getParameters();

        List<IonChamber> icList = new ArrayList<>();
        LinkedHashSet<IonChamberRow> rows = tableModel.getRows();

        for (IonChamberRow row : rows) {
            if (row.getIncluded()) {
                icList.add(row.getIonChamber());
            }
        }

        if (icList.isEmpty()) {
            throw new ValidationException("Please select at least one ion chamber");
        }

        params.setIonChamberList(icList);
    }

    @Override
    public void reset() {
        setIonChambers(new ArrayList<>());
    }

    /**
     * Set the ion chamber list.
     *
     * @param icList The list
     */
    public void setIonChambers(List<IonChamber> icList) {
        // if we were nice we'd look at old list, if exists, and try to maintain include state if returning to page via back button
        LinkedHashSet<IonChamberRow> existingRows = tableModel.getRows();

        LinkedHashSet<IonChamberRow> rowSet = new LinkedHashSet<>();

        if (icList != null) {
            // Sort alphabetically by friendly name, then EPICS name
            Collections.sort(icList);

            for (IonChamber ic : icList) {
                boolean included = true;

                for (IonChamberRow row : existingRows) {
                    if (row.getIonChamber().equals(ic)) {
                        included = row.getIncluded();
                        break;
                    }
                }

                rowSet.add(new IonChamberRow(ic, included));
            }
        }

        tableModel.setRows(rowSet);
    }
}
