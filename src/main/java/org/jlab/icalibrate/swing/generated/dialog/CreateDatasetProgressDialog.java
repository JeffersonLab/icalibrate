package org.jlab.icalibrate.swing.generated.dialog;

import java.awt.Frame;
import javax.swing.JOptionPane;
import org.jlab.icalibrate.model.CreateNewDatasetParameters;
import org.jlab.icalibrate.swing.worker.CreateNewDatasetWorker;
import org.jlab.icalibrate.swing.worker.CreateNewDatasetWorker.WorkerState;

/**
 * A JDialog that shows the progress of the create new dataset process.
 * 
 * Layout was done using Netbeans Matisse Swing GUI builder.
 * 
 * @author ryans
 */
public class CreateDatasetProgressDialog extends javax.swing.JDialog {
    
    private CreateNewDatasetWorker worker;
    private int maxStep;
    private int maxSample;

    /**
     * Create a new CreateDatasetProgressDialog.
     * 
     * @param parent The parent frame
     */
    public CreateDatasetProgressDialog(Frame parent) {
        super(parent, true);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sampleProgressBar = new javax.swing.JProgressBar();
        progressCancelButton = new javax.swing.JButton();
        progressTextLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        stepLabel = new javax.swing.JLabel();
        sampleLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Hall Calibration Dataset Progress");
        setMinimumSize(new java.awt.Dimension(425, 200));
        setPreferredSize(new java.awt.Dimension(425, 200));

        sampleProgressBar.setStringPainted(true);

        progressCancelButton.setText("Cancel");
        progressCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                progressCancelButtonActionPerformed(evt);
            }
        });

        progressTextLabel.setText("Working...");

        jLabel1.setText("Sample:");

        jLabel2.setText("Step:");

        stepLabel.setText("0 of 3");

        sampleLabel.setText("1 of 2");

        jLabel3.setText("State:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sampleProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 405, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(progressCancelButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(progressTextLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(stepLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                                    .addComponent(sampleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sampleProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(progressTextLabel)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(stepLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(sampleLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(progressCancelButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void progressCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_progressCancelButtonActionPerformed
        doCancel();
    }//GEN-LAST:event_progressCancelButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JButton progressCancelButton;
    private javax.swing.JLabel progressTextLabel;
    private javax.swing.JLabel sampleLabel;
    private javax.swing.JProgressBar sampleProgressBar;
    private javax.swing.JLabel stepLabel;
    // End of variables declaration//GEN-END:variables

    private void doCancel() {
        worker.cancel(true);
        setVisible(false);        
    }
    
    /**
     * Update the progress bar.
     * 
     * @param percent The percent progress complete
     */
    public void updateProgressPercent(int percent) {
        sampleProgressBar.setValue(percent);
        sampleProgressBar.setString(percent + "%");
    }
    
    /**
     * Set the process parameters and cancel target.
     * 
     * @param params The CreateNewDatasetParameters
     * @param worker The CreateNewDatasetWorker
     */
    public void setParamsAndCancelTarget(CreateNewDatasetParameters params, CreateNewDatasetWorker worker) {
        this.setTitle("Hall " + params.getHall().name() + " Calibration Dataset Progress");
        this.worker = worker;
        this.maxStep = params.getNumberOfSteps();
        this.maxSample = params.getSamplesPerStep();
    }
    
    /**
     * Update the progress message.
     * 
     * @param chunk The incremental progress information
     */
    public void updateProgressText(CreateNewDatasetWorker.IncrementalResultChunk chunk) {        
        progressTextLabel.setText(chunk.state.label + "... ");
        stepLabel.setText(chunk.step + " of " + maxStep);
        
        if (chunk.sample != null) {
            sampleLabel.setText(chunk.sample + " of " + maxSample);
        } else {
            sampleLabel.setText("");
        }
        
        if(chunk.state == WorkerState.WAITING_ON_FSD) {
            int result = JOptionPane.showConfirmDialog(this, "Click OK to resume and restart most recent step, or cancel to abort.", "FSD Fault Detected", JOptionPane.OK_CANCEL_OPTION);
            
            if(result == JOptionPane.OK_OPTION) {
                worker.resume();
            } else {
                doCancel();
            }
        }
    }
}
